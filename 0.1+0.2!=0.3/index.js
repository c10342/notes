// 0.1+0.2!=0.3

console.log(parseInt("1010", 2));

// 整数位 当前位的值*2^(n-1)
// 小数位 把当前的不停的乘2取整

/**
 * 0.1转化为2进制 0.00011
 * 0.1 * 2 = 0.2 无整数
 * 0.2 * 2 = 0.4 无整数
 * 0.4 * 2 = 0.8 无整数
 * 0.8 * 2 = 1.6 有整数，余0.6
 * 0.6 * 2 = 1.2 有整数，余0.2
 * 所以0.1转化为二进制是无穷无尽的
 */

// 0.1转化为二进制由于数无穷无尽，所以js 会在超出一定长度后进行四舍五入，所以运算的时候会比实际值大一点或者小一点
console.log((0.1).toString(2)); // 双精度浮点数
// 0.0001100110011001100110011001100110011001100110011001101

console.log((0.2).toString(2));
// 0.001100110011001100110011001100110011001100110011001101
